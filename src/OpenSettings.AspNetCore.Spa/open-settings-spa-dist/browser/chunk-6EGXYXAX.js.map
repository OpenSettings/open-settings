{
  "version": 3,
  "sources": ["src/app/features/licenses/services/licenses.service.ts", "src/app/features/licenses/license-upgrade/license-upgrade.component.ts", "src/app/features/licenses/license-upgrade/license-upgrade.component.html"],
  "sourcesContent": ["import { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\r\nimport { Injectable, OnDestroy } from \"@angular/core\";\r\nimport { Observable, Subject, takeUntil } from \"rxjs\";\r\nimport { License, LicenseEdition, WindowService } from \"../../../core/services/window.service\";\r\nimport { AuthService } from \"../../../core/services/auth.service\";\r\nimport { GetPaginatedRequest } from \"../../../shared/models/get-paginated-request\";\r\nimport { IResponse, IResponseAny } from \"../../../shared/models/response\";\r\nimport { SortDirection } from \"../../../shared/models/sort-direction.enum\";\r\nimport { GetPaginatedLicensesResponse } from \"../models/get-paginated-licenses-response\";\r\nimport { SaveLicenseRequest } from \"../models/save-license-request\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class LicensesService implements OnDestroy {\r\n    private headers: HttpHeaders = new HttpHeaders();\r\n    private route: string;\r\n    private destroy$ = new Subject<void>();\r\n\r\n    constructor(\r\n        private httpClient: HttpClient,\r\n        private authService: AuthService,\r\n        windowService: WindowService) {\r\n        this.route = windowService.controllerOptions.route;\r\n        this.authService.isAuthenticated$\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(isAuthenticated => {\r\n                this.headers = isAuthenticated\r\n                    ? new HttpHeaders({ 'Authorization': `${this.authService.token}` })\r\n                    : new HttpHeaders();\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    getPaginatedLicenses(request: GetPaginatedRequest): Observable<IResponse<GetPaginatedLicensesResponse>> {\r\n        let url = this.route + '/v1/licenses/paginated';\r\n\r\n        let params = new HttpParams();\r\n\r\n        if (request.pageIndex) {\r\n            params = params.append(\"page\", request.pageIndex);\r\n        }\r\n\r\n        if (request.pageSize) {\r\n            params = params.append(\"size\", request.pageSize);\r\n        }\r\n\r\n        if (request.searchTerm) {\r\n            params = params.append(\"searchTerm\", request.searchTerm);\r\n        }\r\n\r\n        if (request.searchBy) {\r\n            params = params.append(\"searchBy\", request.searchBy);\r\n        }\r\n\r\n        if (request.sortBy) {\r\n\r\n            params = params.append(\"sortBy\", request.sortBy);\r\n\r\n            if (request.sortDirection === SortDirection.Desc) {\r\n                params = params.append(\"sortDirection\", request.sortDirection)\r\n            }\r\n        }\r\n\r\n        const queryParams = params.toString()\r\n\r\n        url += queryParams ? '?' + queryParams : '';\r\n\r\n        return this.httpClient.get<IResponse<GetPaginatedLicensesResponse>>(url, { headers: this.headers });\r\n    }\r\n\r\n    getCurrentLicense(): Observable<IResponse<License>> {\r\n\r\n        let url = this.route + '/v1/licenses/current';\r\n\r\n        return this.httpClient.get<IResponse<License>>(url, { headers: this.headers });\r\n    }\r\n\r\n    saveLicense(request: SaveLicenseRequest): Observable<IResponse<License>> {\r\n\r\n        const url = this.route + '/v1/licenses';\r\n\r\n        return this.httpClient.post<IResponse<License>>(url, `\"${request.licenseKey}\"`, { headers: this.headers.set('Content-Type', 'application/json') });\r\n    }\r\n\r\n    deleteLicense(referenceId: string): Observable<IResponseAny> {\r\n\r\n        const url = this.route + '/v1/licenses/' + encodeURIComponent(referenceId);\r\n\r\n        return this.httpClient.delete<IResponseAny>(url, { headers: this.headers });\r\n    }\r\n\r\n    getLicenseUpdateMessage(initialLicense: License, currentLicense: License): { message: string, duration: number } {\r\n        let message;\r\n        let duration;\r\n\r\n        if (initialLicense.referenceId === currentLicense.referenceId) {\r\n            message = `A new license has been registered, but your current license remains unchanged because it has a higher tier or a later expiration date.`;\r\n            duration = 8000;\r\n\r\n        } else if (initialLicense.edition === currentLicense.edition) {\r\n            message = 'The license has been updated!';\r\n            duration = 3500;\r\n        }\r\n        else {\r\n            message = `The license has been ${currentLicense.edition > initialLicense.edition ? 'upgraded' : 'downgraded'} to ${LicenseEdition[currentLicense.edition]} Edition!`;\r\n            duration = 5250;\r\n        }\r\n\r\n        return {\r\n            message,\r\n            duration\r\n        }\r\n    }\r\n}", "import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { LicensesService } from \"../services/licenses.service\";\r\nimport { Subscription, switchMap } from \"rxjs\";\r\nimport { GetLinksResponseLink, OpenSettingsService } from \"../../../shared/services/open-settings.service\";\r\nimport { HttpErrorResponse } from \"@angular/common/http\";\r\nimport { IResponseAny } from \"../../../shared/models/response\";\r\nimport { UtilityService } from \"../../../shared/services/utility.service\";\r\nimport { License, LicenseEdition, WindowService } from \"../../../core/services/window.service\";\r\nimport { MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\n\r\n@Component({\r\n    templateUrl: './license-upgrade.component.html'\r\n})\r\nexport class LicenseUpgradeComponent implements OnInit, OnDestroy {\r\n    licenseKey?: string;\r\n    hideLicenseKey: boolean = true;\r\n    subscriptions: Subscription = new Subscription();\r\n    licenseLink: GetLinksResponseLink = { url: '', isActive: false };\r\n    actionName: string;\r\n    isLoading: boolean = false;\r\n\r\n    constructor(\r\n        private licensesService: LicensesService,\r\n        private openSettingsService: OpenSettingsService,\r\n        private utilityService: UtilityService,\r\n        private windowService: WindowService,\r\n        private dialogRef: MatDialogRef<LicenseUpgradeComponent>,\r\n        private snackBar: MatSnackBar) { \r\n            this.actionName = windowService.license.edition === LicenseEdition.Enterprise ? 'Re-new' : 'Upgrade';\r\n        }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.unsubscribe();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        const linkSubscription = this.openSettingsService.getLinks().subscribe(response => {\r\n\r\n            const licenseLink = response['license'];\r\n\r\n            if (licenseLink) {\r\n                this.licenseLink.url = licenseLink.url;\r\n                this.licenseLink.isActive = licenseLink.isActive;\r\n            }\r\n        });\r\n\r\n        this.subscriptions.add(linkSubscription);\r\n    }\r\n\r\n    upgradeLicense(licenseKey?: string) {\r\n\r\n        if (!licenseKey) {\r\n            return;\r\n        }\r\n\r\n        this.isLoading = true;\r\n\r\n        const subscription = this.licensesService.saveLicense({ licenseKey }).pipe(\r\n            switchMap(() => this.licensesService.getCurrentLicense())\r\n        )\r\n            .subscribe({\r\n                next: (response) => {\r\n\r\n                    const currentLicense = response.data as License;\r\n\r\n                    if (!currentLicense) {\r\n                        this.isLoading = false;\r\n                        return;\r\n                    }\r\n\r\n                    const initialLicense = this.windowService.license;\r\n\r\n                    const licenseUpdateMessage = this.licensesService.getLicenseUpdateMessage(initialLicense, currentLicense);\r\n\r\n                    this.windowService.updateLicense(currentLicense);\r\n\r\n                    this.snackBar.open(licenseUpdateMessage.message, 'Close', {\r\n                        horizontalPosition: 'right',\r\n                        verticalPosition: 'top',\r\n                        duration: licenseUpdateMessage.duration\r\n                    });\r\n\r\n                    this.isLoading = false;\r\n\r\n                    this.dialogRef.close(true);\r\n                },\r\n                error: (err: HttpErrorResponse) => {\r\n\r\n                    const response = err.error as IResponseAny;\r\n\r\n                    if (response && response.errors) {\r\n                        this.utilityService.error(response.errors, 3500);\r\n                    } else {\r\n                        this.utilityService.simpleError(err.message, 2250);\r\n                    }\r\n\r\n                    this.isLoading = false;\r\n                }\r\n            });\r\n\r\n        this.subscriptions.add(subscription);\r\n    }\r\n\r\n    upload(event: any){\r\n        this.utilityService.upload(event.target.files[0] as File).then(content => {\r\n            const licenseKey = content.trim();\r\n\r\n            this.upgradeLicense(licenseKey);\r\n\r\n        }).catch(error => {\r\n            this.snackBar.open(`Error occurred while uploading file. Error: ${error}`, 'Close', {\r\n                horizontalPosition: 'right',\r\n                verticalPosition: 'top',\r\n                duration: 8000\r\n            });\r\n        });\r\n    }\r\n\r\n    toggleLicenseKeyVisibility() {\r\n        this.hideLicenseKey = !this.hideLicenseKey;\r\n    }\r\n}", "<div class=\"loading-container\" *ngIf=\"isLoading\">\r\n    <div class=\"mat-bg-primary position-absolute rounded-circle app-icon-animation\"><img class=\"app-icon bg-white\"></div>\r\n    <div class=\"loading-spinner\"></div>\r\n</div>\r\n\r\n<h2 mat-dialog-title>\r\n    {{actionName}} OpenSettings\r\n    <button class=\"position-absolute r-0 t-0\" mat-icon-button mat-dialog-close matTooltip=\"Close\" matTooltipPosition=\"above\">\r\n        <mat-icon>close</mat-icon>\r\n    </button>\r\n</h2>\r\n<mat-dialog-content>\r\n    <p>Please enter your license below:</p>\r\n    <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n        <mat-label>License Key</mat-label>\r\n        <input [type]=\"hideLicenseKey ? 'password' : 'text'\" matInput #licenseInput=\"ngModel\" [(ngModel)]=\"licenseKey\" required>\r\n        <button mat-icon-button matSuffix matTooltip=\"Upload\" color=\"primary\" (click)=\"fileInput.click()\">\r\n            <mat-icon>upload</mat-icon>\r\n            <input class=\"d-none\" type=\"file\" #fileInput accept=\".txt,.key\" (change)=\"upload($event)\">\r\n        </button>\r\n        <button mat-icon-button matSuffix (click)=\"toggleLicenseKeyVisibility()\">\r\n            <mat-icon>{{ hideLicenseKey ? 'visibility_off' : 'visibility' }}</mat-icon>\r\n        </button>\r\n        <mat-hint>A restart may be required for full changes to take effect.</mat-hint>\r\n        <mat-error *ngIf=\"licenseInput.invalid\">License key is required</mat-error>\r\n    </mat-form-field>\r\n</mat-dialog-content>\r\n<mat-dialog-actions align=\"end\">\r\n    <a mat-button *ngIf=\"licenseLink.isActive && licenseLink.url\" [href]=\"licenseLink.url\"  target=\"_blank\">\r\n        <span>Get a License</span>\r\n      </a>\r\n    <button type=\"submit\" mat-flat-button color=\"primary\" [disabled]=\"!licenseKey\" (click)=\"upgradeLicense(licenseKey)\">{{actionName}}</button>\r\n</mat-dialog-actions>"],
  "mappings": "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",
  "names": []
}
