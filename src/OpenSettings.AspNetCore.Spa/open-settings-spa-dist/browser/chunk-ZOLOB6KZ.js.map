{
  "version": 3,
  "sources": ["src/app/features/group/services/app-groups.service.ts"],
  "sourcesContent": ["import { HttpHeaders, HttpClient, HttpParams, HttpErrorResponse } from \"@angular/common/http\";\r\nimport { Injectable, OnDestroy } from \"@angular/core\";\r\nimport { AuthService } from \"../../../core/services/auth.service\";\r\nimport { WindowService } from \"../../../core/services/window.service\";\r\nimport { GetAppGroupsRequest } from \"../models/get-app-groups-request\";\r\nimport { catchError, Observable, of, Subject, takeUntil } from \"rxjs\";\r\nimport { CreateAppGroupRequest } from \"../models/create-app-group-request\";\r\nimport { CreateAppGroupResponse } from \"../models/create-app-group-response\";\r\nimport { GetPaginatedRequest } from \"../../../shared/models/get-paginated-request\";\r\nimport { UpdateAppGroupRequest } from \"../models/update-app-group-request\";\r\nimport { DeleteAppGroupRequest } from \"../models/delete-app-group-request\";\r\nimport { UpdateAppGroupOrderRequest } from \"../models/update-app-group-order-request\";\r\nimport { DragItemSortOrderRequest } from \"../../../shared/models/drag-item-sort-order-request\";\r\nimport { DragItemSortOrderResponse } from \"../../../shared/models/drag-item-sort-order-response\";\r\nimport { IResponse, IResponseAny } from \"../../../shared/models/response\";\r\nimport { DeleteUnmappedItemsResponse } from \"../../../shared/models/delete-unmapped-items-response\";\r\nimport { GetAppGroupsResponse } from \"../models/get-app-groups-response\";\r\nimport { GetPaginatedAppGroupsResponse } from \"../models/get-paginated-app-groups-response\";\r\nimport { UpdateSortOrderResponse } from \"../../../shared/models/update-sort-order-response\";\r\nimport { GetAppGroupResponse } from \"../models/get-app-group-response\";\r\nimport { GetAppGroupRequest } from \"../models/get-app-group-request\";\r\nimport { UpdateAppGroupResponse } from \"../models/update-app-group-response\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class GroupsService implements OnDestroy {\r\n    private headers: HttpHeaders = new HttpHeaders();\r\n    private route: string;\r\n    private destroy$ = new Subject<void>();\r\n\r\n    constructor(\r\n        private httpClient: HttpClient,\r\n        private authService: AuthService,\r\n        windowService: WindowService) {\r\n        this.route = windowService.controllerOptions.route;\r\n        this.authService.isAuthenticated$\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(isAuthenticated => {\r\n                this.headers = isAuthenticated\r\n                    ? new HttpHeaders({ 'Authorization': `${this.authService.token}` })\r\n                    : new HttpHeaders();\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    getPaginatedGroups(request: GetPaginatedRequest): Observable<IResponse<GetPaginatedAppGroupsResponse>> {\r\n\r\n        let url = this.route + '/v1/app-groups/paginated';\r\n\r\n        let params = new HttpParams();\r\n\r\n        if (request.pageIndex) {\r\n            params = params.append(\"page\", request.pageIndex);\r\n        }\r\n\r\n        if (request.pageSize) {\r\n            params = params.append(\"size\", request.pageSize);\r\n        }\r\n\r\n        if (request.searchTerm) {\r\n            params = params.append(\"searchTerm\", request.searchTerm);\r\n        }\r\n\r\n        if (request.sortBy) {\r\n\r\n            params = params.append(\"sortBy\", request.sortBy);\r\n\r\n            if (request.sortDirection) {\r\n                params = params.append(\"sortDirection\", request.sortDirection)\r\n            }\r\n        }\r\n\r\n        const queryParams = params.toString()\r\n\r\n        url += queryParams ? '?' + queryParams : '';\r\n\r\n        return this.httpClient.get<IResponse<GetPaginatedAppGroupsResponse>>(url, { headers: this.headers });\r\n    }\r\n\r\n    deleteUnmappedGroups(): Observable<IResponse<DeleteUnmappedItemsResponse>> {\r\n\r\n        const url = this.route + '/v1/app-groups/unmapped';\r\n\r\n        return this.httpClient.delete<IResponse<DeleteUnmappedItemsResponse>>(url, { headers: this.headers });\r\n    }\r\n\r\n    getGroups(request: GetAppGroupsRequest): Observable<IResponse<GetAppGroupsResponse>> {\r\n\r\n        let url = this.route + '/v1/app-groups';\r\n\r\n        let params = new HttpParams();\r\n\r\n        if (request.searchTerm) {\r\n            params = params.append(\"searchTerm\", request.searchTerm);\r\n        }\r\n\r\n        if (request.hasMappings) {\r\n            params = params.append(\"hasMappings\", request.hasMappings);\r\n        }\r\n\r\n        const queryParams = params.toString()\r\n\r\n        url += queryParams ? '?' + queryParams : '';\r\n\r\n        return this.httpClient.get<IResponse<GetAppGroupsResponse>>(url, { headers: this.headers });\r\n    }\r\n\r\n    createGroup(request: CreateAppGroupRequest): Observable<IResponse<CreateAppGroupResponse>> {\r\n\r\n        const url = this.route + '/v1/app-groups';\r\n\r\n        return this.httpClient.post<IResponse<CreateAppGroupResponse>>(url, request.body, { headers: this.headers });\r\n    }\r\n\r\n    getGroupById(request: GetAppGroupRequest): Observable<IResponse<GetAppGroupResponse>> {\r\n\r\n        const url = this.route + '/v1/app-groups/' + request.groupIdOrSlug;\r\n\r\n        return this.httpClient.get<IResponse<GetAppGroupResponse>>(url, { headers: this.headers });\r\n    }\r\n\r\n    getGroupBySlug(request: GetAppGroupRequest): Observable<IResponse<GetAppGroupResponse>> {\r\n\r\n        const url = this.route + '/v1/app-groups/slug/' + request.groupIdOrSlug;\r\n\r\n        return this.httpClient.get<IResponse<GetAppGroupResponse>>(url, { headers: this.headers });\r\n    }\r\n\r\n    deleteGroup(request: DeleteAppGroupRequest): Observable<IResponseAny> {\r\n\r\n        const url = this.route + '/v1/app-groups/' + request.id + '?rowVersion=' + encodeURIComponent(request.rowVersion);\r\n\r\n        return this.httpClient.delete<IResponseAny>(url, { headers: this.headers }).pipe(\r\n            catchError((response: HttpErrorResponse) => {\r\n                if (response.status === 409) {\r\n                    return of(response.error as IResponseAny);\r\n                }\r\n\r\n                throw response;\r\n            })\r\n        );\r\n    }\r\n\r\n    updateGroupSortOrder(request: UpdateAppGroupOrderRequest): Observable<IResponse<UpdateSortOrderResponse>> {\r\n\r\n        const url = this.route + '/v1/app-groups/' + request.id + '/sort-order?ascent=' + request.ascent + '&rowVersion=' + encodeURIComponent(request.rowVersion);\r\n\r\n        return this.httpClient.post<IResponse<UpdateSortOrderResponse>>(url, null, { headers: this.headers }).pipe(\r\n            catchError((response: HttpErrorResponse) => {\r\n                if (response.status === 409) {\r\n                    return of(response.error as IResponse<UpdateSortOrderResponse>);\r\n                }\r\n\r\n                throw response;\r\n            })\r\n        );\r\n    }\r\n\r\n    dragGroup(request: DragItemSortOrderRequest): Observable<IResponse<DragItemSortOrderResponse>> {\r\n\r\n        const url = this.route + '/v1/app-groups/' + request.sourceId + '/drag/' + request.targetId + '?ascent=' + request.ascent + '&sourceRowVersion=' + encodeURIComponent(request.sourceRowVersion);\r\n\r\n        return this.httpClient.post<IResponse<DragItemSortOrderResponse>>(url, null, { headers: this.headers }).pipe(\r\n            catchError((response: HttpErrorResponse) => {\r\n                if (response.status === 409) {\r\n                    return of(response.error as IResponse<DragItemSortOrderResponse>);\r\n                }\r\n\r\n                throw response;\r\n            })\r\n        );\r\n    }\r\n\r\n    updateGroup(request: UpdateAppGroupRequest): Observable<IResponse<UpdateAppGroupResponse>> {\r\n\r\n        const url = this.route + '/v1/app-groups/' + request.groupId;\r\n\r\n        return this.httpClient.put<IResponse<UpdateAppGroupResponse>>(url, request.body, { headers: this.headers }).pipe(\r\n            catchError((response: HttpErrorResponse) => {\r\n                if (response.status === 409) {\r\n                    return of(response.error as IResponse<UpdateAppGroupResponse>);\r\n                }\r\n\r\n                throw response;\r\n            })\r\n        );\r\n    }\r\n\r\n    reorder() {\r\n\r\n        const url = this.route + '/v1/app-groups/reorder';\r\n\r\n        return this.httpClient.post<IResponseAny>(url, null, { headers: this.headers }).pipe(\r\n            catchError((response: HttpErrorResponse) => {\r\n                if (response.status === 409) {\r\n                    return of(response.error as IResponse<DragItemSortOrderResponse>);\r\n                }\r\n\r\n                throw response;\r\n            })\r\n        );\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
