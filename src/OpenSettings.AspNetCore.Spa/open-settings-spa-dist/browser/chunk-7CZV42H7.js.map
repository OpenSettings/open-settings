{
  "version": 3,
  "sources": ["src/app/features/login/login.component.ts", "src/app/features/login/login.component.html", "src/app/features/login/login-routing.module.ts", "src/app/features/login/login.module.ts"],
  "sourcesContent": ["import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ProviderInfo, WindowService } from '../../core/services/window.service';\r\nimport { AuthService } from '../../core/services/auth.service';\r\nimport { CustomValidators } from '../../shared/utils/custom-validators';\r\nimport { ThemeInfo } from '../../core/models/theme-info.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { UserPreferencesService } from '../../shared/services/user-preferences.service';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n    form!: FormGroup;\r\n    route?: string;\r\n    serviceType?: string;\r\n    packVersion?: string;\r\n    providerInfo?: ProviderInfo;\r\n    hidePassword: boolean = true;\r\n    themeInfo?: ThemeInfo;\r\n    selectedLogin: 'basic' | null = null;\r\n    subscriptions: Subscription = new Subscription();\r\n\r\n    constructor(private router: Router,\r\n        private formBuilder: FormBuilder,\r\n        private authService: AuthService,\r\n        private snackBar: MatSnackBar,\r\n        private windowService: WindowService,\r\n        private userPreferencesService: UserPreferencesService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n\r\n        if (this.authService.isAuthenticated || !this.authService.isAuthorizationRequired) {\r\n            this.router.navigate(['']);\r\n        }\r\n\r\n        this.route = this.windowService.controllerOptions.route;\r\n        this.providerInfo = this.windowService.providerInfo;\r\n        this.serviceType = this.windowService.serviceType;\r\n        this.packVersion = this.windowService.packVersion;\r\n\r\n        if (!this.providerInfo.oAuth2.isActive) {\r\n            this.selectedLogin = 'basic';\r\n        }\r\n\r\n        this.form = this.formBuilder.group({\r\n            clientId: ['', [Validators.required, CustomValidators.mustGuid]],\r\n            clientSecret: ['', [Validators.required, CustomValidators.mustGuid]]\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.subscriptions.unsubscribe();\r\n    }\r\n\r\n\r\n    selectLogin(type: 'basic'): void {\r\n        this.selectedLogin = type;\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.form.valid) {\r\n            this.login();\r\n        }\r\n    }\r\n\r\n    get clientId() {\r\n        return this.form.get('clientId')?.value;\r\n    }\r\n\r\n    get clientSecret() {\r\n        return this.form.get('clientSecret')?.value;\r\n    }\r\n\r\n    login(): void {\r\n\r\n        const clientId = this.clientId;\r\n\r\n        const clientSecret = this.clientSecret;\r\n\r\n        if (!clientId || !clientSecret) {\r\n            return;\r\n        }\r\n\r\n        const subscription = this.authService.basicAuthorize(clientId, clientSecret).subscribe(isAuthenticated => {\r\n\r\n            if (isAuthenticated) {\r\n                this.router.navigate(['']);\r\n                return;\r\n            }\r\n\r\n            const errorMessage = isAuthenticated === false ? `Error: Credentials are not valid!` : 'Error: Exception occurred while the processing';\r\n\r\n            this.snackBar.open(errorMessage, 'Close', {\r\n                horizontalPosition: 'center',\r\n                verticalPosition: 'top',\r\n                duration: 2250\r\n            });\r\n        });\r\n\r\n        this.subscriptions.add(subscription);\r\n    }\r\n\r\n    handleOauth(): void {\r\n\r\n        let url = this.route + '/v1/auth/login';\r\n\r\n        if (this.serviceType === 'Consumer') {\r\n            url += `?uuid=${this.userPreferencesService.uuid}`;\r\n        }\r\n\r\n        this.userPreferencesService.setAuth('oauth2')\r\n        \r\n        window.location.href = url;\r\n    }\r\n\r\n    reset(): void {\r\n        this.selectedLogin = null;\r\n        this.form.get('clientId')?.setValue('');\r\n        this.form.get('clientSecret')?.setValue('');\r\n    }\r\n\r\n    togglePasswordVisibility() {\r\n        this.hidePassword = !this.hidePassword;\r\n    }\r\n}", "<div class=\"login-container\">\r\n    <mat-card class=\"login-card\">\r\n        <mat-card-title class=\"login-title\">{{ selectedLogin ? 'Basic Authentication' : 'Please choose your preferred login'}}</mat-card-title>\r\n        <mat-divider></mat-divider>\r\n\r\n        <div class=\"mt-2\" *ngIf=\"!selectedLogin else basicLogin\">\r\n            <button class=\"w-100\" mat-raised-button color=\"primary\" (click)=\"selectLogin('basic')\"><mat-icon>vpn_key</mat-icon>Basic</button>\r\n            <button class=\"w-100 mt-2\" mat-raised-button color=\"accent\" (click)=\"handleOauth()\"><mat-icon>enhanced_encryption</mat-icon>OAuth</button>\r\n        </div>\r\n    </mat-card>\r\n    <div class=\"position-absolute b-0 p-2 text-muted\">v{{packVersion}}</div>\r\n</div>\r\n\r\n<ng-template #basicLogin>\r\n    <mat-card-content class=\"mt-2\" *ngIf=\"selectedLogin\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <mat-form-field class=\"mb-1\" appearance=\"outline\">\r\n                <mat-label>Client Id:</mat-label>\r\n                <input matInput type=\"text\" formControlName=\"clientId\">\r\n                <mat-error *ngIf=\"form.get('clientId')?.hasError('invalidGuid')\" class=\"text-align-start\">Invalid GUID.</mat-error>\r\n            </mat-form-field>\r\n    \r\n            <mat-form-field class=\"mb-1\" appearance=\"outline\">\r\n                <mat-label>Client Secret:</mat-label>\r\n                <input matInput [type]=\"hidePassword ? 'password' : 'text'\" formControlName=\"clientSecret\">\r\n                <button mat-icon-button matSuffix (click)=\"togglePasswordVisibility()\">\r\n                    <mat-icon>{{ hidePassword ? 'visibility_off' : 'visibility' }}</mat-icon>\r\n                </button>\r\n                <mat-error *ngIf=\"form.get('clientSecret')?.hasError('invalidGuid')\">Invalid GUID.</mat-error>\r\n            </mat-form-field>\r\n\r\n            <button type=\"submit\" mat-raised-button color=\"primary\" class=\"w-100\" [disabled]=\"form.invalid\">Login</button>\r\n            <button mat-stroked-button color=\"warn\" class=\"w-100 mt-2\" (click)=\"reset()\" *ngIf=\"providerInfo?.oAuth2?.isActive\">Back</button>\r\n        </form>\r\n    </mat-card-content>\r\n</ng-template>", "import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { LoginComponent } from \"./login.component\";\r\n\r\nconst routes: Routes = [\r\n    { path: '', component: LoginComponent },\r\n    { path: '**', redirectTo: '' }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule { }", "import { NgModule } from '@angular/core';\r\nimport { LoginComponent } from './login.component';\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    LoginRoutingModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatFormFieldModule,\r\n    MatCardModule,\r\n    MatDividerModule,\r\n    MatInputModule\r\n  ]\r\n})\r\nexport class LoginModule { }"],
  "mappings": "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",
  "names": []
}
