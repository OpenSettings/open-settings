{
  "version": 3,
  "sources": ["src/app/features/identifier/services/identifiers.service.ts"],
  "sourcesContent": ["import { HttpHeaders, HttpClient, HttpParams, HttpErrorResponse } from \"@angular/common/http\";\r\nimport { Injectable, OnDestroy } from \"@angular/core\";\r\nimport { Observable, Subject, catchError, of, takeUntil } from \"rxjs\";\r\nimport { AuthService } from \"../../../core/services/auth.service\";\r\nimport { WindowService } from \"../../../core/services/window.service\";\r\nimport { DragItemSortOrderRequest } from \"../../../shared/models/drag-item-sort-order-request\";\r\nimport { DragItemSortOrderResponse } from \"../../../shared/models/drag-item-sort-order-response\";\r\nimport { GetPaginatedRequest } from \"../../../shared/models/get-paginated-request\";\r\nimport { IResponse, IResponseAny } from \"../../../shared/models/response\";\r\nimport { DeleteUnmappedItemsResponse } from \"../../../shared/models/delete-unmapped-items-response\";\r\nimport { ReorderResponse } from \"../../../shared/models/reorder-response\";\r\nimport { UpdateSortOrderResponse } from \"../../../shared/models/update-sort-order-response\";\r\nimport { CreateIdentifierRequest } from \"../models/create-identifier-request\";\r\nimport { CreateIdentifierResponse } from \"../models/create-identifier-response\";\r\nimport { DeleteIdentifierRequest } from \"../models/delete-identifier-request\";\r\nimport { DeleteIdentifierResponse } from \"../models/delete-identifier-response\";\r\nimport { GetPaginatedIdentifiersResponse } from \"../models/get-paginated-identifiers-response\";\r\nimport { GetIdentifierRequest } from \"../models/get-identifier-request\";\r\nimport { GetIdentifierResponse } from \"../models/get-identifier-response\";\r\nimport { GetIdentifiersRequest } from \"../models/get-identifiers-request\";\r\nimport { UpdateIdentifierRequest } from \"../models/update-identifier-request\";\r\nimport { UpdateIdentifierResponse } from \"../models/update-identifier-response\";\r\nimport { UpdateIdentifierOrderRequest } from \"../models/update-identifier-sort-order-request\";\r\nimport { GetIdentifiersResponse } from \"../models/get-identifiers-response\";\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class IdentifiersService implements OnDestroy {\r\n    private headers: HttpHeaders = new HttpHeaders();\r\n    private route: string;\r\n    private destroy$ = new Subject<void>();\r\n\r\n    constructor(\r\n        private httpClient: HttpClient,\r\n        private authService: AuthService,\r\n        windowService: WindowService) {\r\n        this.route = windowService.controllerOptions.route;\r\n        this.authService.isAuthenticated$\r\n        .pipe(takeUntil(this.destroy$))\r\n        .subscribe(isAuthenticated => {\r\n          this.headers = isAuthenticated\r\n            ? new HttpHeaders({ 'Authorization': `${this.authService.token}` })\r\n            : new HttpHeaders();\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n      }\r\n\r\n    getPaginatedIdentifiers(request: GetPaginatedRequest): Observable<IResponse<GetPaginatedIdentifiersResponse>> {\r\n\r\n        let url = this.route + '/v1/identifiers/paginated';\r\n\r\n        let params = new HttpParams();\r\n\r\n        if (request.pageIndex) {\r\n            params = params.append(\"page\", request.pageIndex);\r\n        }\r\n\r\n        if (request.pageSize) {\r\n            params = params.append(\"size\", request.pageSize);\r\n        }\r\n\r\n        if (request.searchTerm) {\r\n            params = params.append(\"searchTerm\", request.searchTerm);\r\n        }\r\n\r\n        if (request.searchBy) {\r\n            params = params.append(\"searchBy\", request.searchBy);\r\n        }\r\n\r\n        if (request.sortBy) {\r\n\r\n            params = params.append(\"sortBy\", request.sortBy);\r\n\r\n            if (request.sortDirection) {\r\n                params = params.append(\"sortDirection\", request.sortDirection)\r\n            }\r\n        }\r\n\r\n        const queryParams = params.toString()\r\n\r\n        url += queryParams ? '?' + queryParams : '';\r\n\r\n        return this.httpClient.get<IResponse<GetPaginatedIdentifiersResponse>>(url, { headers: this.headers });\r\n    }\r\n\r\n    deleteUnmappedIdentifiers(): Observable<IResponse<DeleteUnmappedItemsResponse>> {\r\n\r\n        const url = this.route + '/v1/identifiers/unmapped';\r\n\r\n        return this.httpClient.delete<IResponse<DeleteUnmappedItemsResponse>>(url, { headers: this.headers });\r\n    }\r\n\r\n    getIdentifiers(request: GetIdentifiersRequest): Observable<IResponse<GetIdentifiersResponse>> {\r\n\r\n        let url = this.route + '/v1/identifiers';\r\n\r\n        let params = new HttpParams();\r\n\r\n        if (request.searchTerm) {\r\n            params = params.append(\"searchTerm\", request.searchTerm);\r\n        }\r\n\r\n        if (request.appId) {\r\n            params = params.append('appId', request.appId);\r\n\r\n            if (request.isAppMapped) {\r\n                params = params.append('isAppMapped', request.isAppMapped);\r\n            }\r\n        }\r\n\r\n        const queryParams = params.toString()\r\n\r\n        url += queryParams ? '?' + queryParams : '';\r\n\r\n        return this.httpClient.get<IResponse<GetIdentifiersResponse>>(url, { headers: this.headers });\r\n    }\r\n\r\n    createIdentifier(request: CreateIdentifierRequest): Observable<IResponse<CreateIdentifierResponse>> {\r\n\r\n        const url = this.route + '/v1/identifiers';\r\n\r\n        return this.httpClient.post<IResponse<CreateIdentifierResponse>>(url, request.body, { headers: this.headers });\r\n    }\r\n\r\n    getIdentifierById(request: GetIdentifierRequest): Observable<IResponse<GetIdentifierResponse>> {\r\n\r\n        const url = this.route + '/v1/identifiers/' + request.identifierIdOrSlug;\r\n\r\n        return this.httpClient.get<IResponse<GetIdentifierResponse>>(url, { headers: this.headers });\r\n    }\r\n\r\n    getIdentifierBySlug(request: GetIdentifierRequest): Observable<IResponse<GetIdentifierResponse>> {\r\n\r\n        const url = this.route + '/v1/identifiers/slug/' + request.identifierIdOrSlug;\r\n\r\n        return this.httpClient.get<IResponse<GetIdentifierResponse>>(url, { headers: this.headers });\r\n    }\r\n\r\n    updateIdentifier(request: UpdateIdentifierRequest): Observable<IResponse<UpdateIdentifierResponse>> {\r\n\r\n        const url = this.route + '/v1/identifiers/' + request.identifierId;\r\n\r\n        return this.httpClient.put<IResponse<UpdateIdentifierResponse>>(url, request.body, { headers: this.headers }).pipe(\r\n            catchError((response: HttpErrorResponse) => {\r\n                if (response.status === 409) {\r\n                    return of(response.error as IResponse<UpdateIdentifierResponse>);\r\n                }\r\n\r\n                throw response;\r\n            })\r\n        );\r\n    }\r\n\r\n    deleteIdentifier(request: DeleteIdentifierRequest): Observable<IResponseAny> {\r\n\r\n        const url = this.route + '/v1/identifiers/' + request.identifierId + '?rowVersion=' + encodeURIComponent(request.rowVersion);\r\n\r\n        return this.httpClient.delete<IResponse<DeleteIdentifierResponse>>(url, { headers: this.headers }).pipe(\r\n            catchError((response: HttpErrorResponse) => {\r\n                if (response.status === 409) {\r\n                    return of(response.error as IResponseAny);\r\n                }\r\n\r\n                throw response;\r\n            })\r\n        );\r\n    }\r\n\r\n    updateIdentifierSortOrder(request: UpdateIdentifierOrderRequest): Observable<IResponse<UpdateSortOrderResponse>> {\r\n\r\n        const url = this.route + '/v1/identifiers/' + request.identifierId + '/sort-order?ascent=' + request.ascent + '&rowVersion=' + encodeURIComponent(request.rowVersion);\r\n\r\n        return this.httpClient.post<IResponse<UpdateSortOrderResponse>>(url, null, { headers: this.headers }).pipe(\r\n            catchError((response: HttpErrorResponse) => {\r\n                if (response.status === 409) {\r\n                    return of(response.error as IResponse<UpdateSortOrderResponse>);\r\n                }\r\n\r\n                throw response;\r\n            })\r\n        );\r\n    }\r\n\r\n    dragIdentifier(request: DragItemSortOrderRequest): Observable<IResponse<DragItemSortOrderResponse>> {\r\n\r\n        const url = this.route + '/v1/identifiers/' + request.sourceId + '/drag/' + request.targetId + '?ascent=' + request.ascent + '&sourceRowVersion=' + encodeURIComponent(request.sourceRowVersion);\r\n\r\n        return this.httpClient.post<IResponse<DragItemSortOrderResponse>>(url, null, { headers: this.headers }).pipe(\r\n            catchError((response: HttpErrorResponse) => {\r\n                if (response.status === 409) {\r\n                    return of(response.error as IResponse<DragItemSortOrderResponse>);\r\n                }\r\n\r\n                throw response;\r\n            })\r\n        );\r\n    }\r\n\r\n    reorder(): Observable<IResponse<ReorderResponse>> {\r\n\r\n        const url = this.route + '/v1/identifiers/reorder';\r\n\r\n        return this.httpClient.post<IResponse<ReorderResponse>>(url, null, { headers: this.headers }).pipe(\r\n            catchError((response: HttpErrorResponse) => {\r\n                if (response.status === 409) {\r\n                    return of(response.error as IResponse<ReorderResponse>);\r\n                }\r\n\r\n                throw response;\r\n            })\r\n        );\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
