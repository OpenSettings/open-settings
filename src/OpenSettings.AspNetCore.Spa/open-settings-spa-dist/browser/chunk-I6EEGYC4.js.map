{
  "version": 3,
  "sources": ["src/app/shared/services/open-settings.service.ts"],
  "sourcesContent": ["import { HttpHeaders, HttpClient } from \"@angular/common/http\";\r\nimport { Injectable, OnDestroy } from \"@angular/core\";\r\nimport { Subject, takeUntil, Observable, map, catchError, of, BehaviorSubject, switchMap } from \"rxjs\";\r\nimport { AuthService } from \"../../core/services/auth.service\";\r\nimport { WindowService } from \"../../core/services/window.service\";\r\nimport { GetSponsorsResponse } from \"../../features/sponsor/models/get-sponsors-response.model\";\r\nimport { GetSponsorsResult } from \"../../features/sponsor/models/get-sponsors-result.model\";\r\nimport { NotificationType } from \"./notifications.service\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class OpenSettingsService implements OnDestroy {\r\n    private headers: HttpHeaders = new HttpHeaders();\r\n    private route: string;\r\n    private destroy$ = new Subject<void>();\r\n\r\n    private linksLoadingSubject$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n    private isLinksLoading: boolean = false;\r\n    private linksData: GetLinksResponse | null = null;\r\n\r\n    constructor(\r\n        private httpClient: HttpClient,\r\n        private authService: AuthService,\r\n        windowService: WindowService) {\r\n        this.route = windowService.controllerOptions.route;\r\n        this.authService.isAuthenticated$\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(isAuthenticated => {\r\n                this.headers = isAuthenticated\r\n                    ? new HttpHeaders({ 'Authorization': `${this.authService.token}` })\r\n                    : new HttpHeaders();\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    getSponsors(): Observable<GetSponsorsResult> {\r\n\r\n        const url = this.route + '/v1/open-settings/configs-data/sponsors';\r\n\r\n        return this.httpClient.get<GetSponsorsResponse>(url, { headers: this.headers }).pipe(map(response => {\r\n            return { data: response, fromFallback: false };\r\n        }),\r\n            catchError(() => this.getSponsorsFromFallback())\r\n        );\r\n    }\r\n\r\n    getSponsorsFromFallback(): Observable<GetSponsorsResult> {\r\n        return this.httpClient.get<GetSponsorsResponse>(`assets/sponsors.json?v=${new Date().getTime()}`).pipe(map(fallbackResponse => {\r\n            return { data: fallbackResponse, fromFallback: true };\r\n        }));\r\n    }\r\n\r\n    getLinks(): Observable<GetLinksResponse> {\r\n\r\n        if (this.linksData) {\r\n            return of(this.linksData);\r\n        }\r\n\r\n        if (this.isLinksLoading) {\r\n            return this.linksLoadingSubject$.pipe(switchMap(() => of(this.linksData ?? {})));\r\n        }\r\n\r\n        this.isLinksLoading = true;\r\n        this.linksLoadingSubject$.next(true);\r\n\r\n        const url = this.route + '/v1/open-settings/configs-data/links';\r\n\r\n        return this.httpClient.get<GetLinksResponse>(url, { headers: this.headers }).pipe(map(response => {\r\n\r\n            this.linksData = response;\r\n\r\n            this.isLinksLoading = false;\r\n            this.linksLoadingSubject$.next(false);\r\n\r\n            return response;\r\n        }),\r\n            catchError(() => of({}))\r\n        );\r\n    }\r\n\r\n    getNotifications(): Observable<GetNotificationsResponse[]> {\r\n\r\n        const url = this.route + '/v1/open-settings/configs-data/notifications';\r\n\r\n        return this.httpClient.get<GetNotificationsResponse[]>(url, { headers: this.headers }).pipe(map(response => {\r\n            return response;\r\n        }),\r\n            catchError(() => of([]))\r\n        );\r\n    }\r\n}\r\n\r\nexport interface GetLinksResponse {\r\n    [key: string]: GetLinksResponseLink;\r\n}\r\n\r\nexport interface GetNotificationsResponse {\r\n    id: string;\r\n    title: string;\r\n    message: string;\r\n    type: NotificationType;\r\n    metadata: { [key: string]: any };\r\n    createdOn: Date;\r\n    createdBy: string;\r\n}\r\n\r\nexport interface GetLinksResponseLink {\r\n    url: string;\r\n    isActive: boolean;\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;AAYM,IAAO,uBAAP,MAAO,qBAAmB;EAS5B,YACY,YACA,aACR,eAA4B;AAFpB,SAAA,aAAA;AACA,SAAA,cAAA;AAVJ,SAAA,UAAuB,IAAI,YAAW;AAEtC,SAAA,WAAW,IAAI,QAAO;AAEtB,SAAA,uBAAiD,IAAI,gBAAyB,KAAK;AACnF,SAAA,iBAA0B;AAC1B,SAAA,YAAqC;AAMzC,SAAK,QAAQ,cAAc,kBAAkB;AAC7C,SAAK,YAAY,iBACZ,KAAK,UAAU,KAAK,QAAQ,CAAC,EAC7B,UAAU,qBAAkB;AACzB,WAAK,UAAU,kBACT,IAAI,YAAY,EAAE,iBAAiB,GAAG,KAAK,YAAY,KAAK,GAAE,CAAE,IAChE,IAAI,YAAW;IACzB,CAAC;EACT;EAEA,cAAW;AACP,SAAK,SAAS,KAAI;AAClB,SAAK,SAAS,SAAQ;EAC1B;EAEA,cAAW;AAEP,UAAM,MAAM,KAAK,QAAQ;AAEzB,WAAO,KAAK,WAAW,IAAyB,KAAK,EAAE,SAAS,KAAK,QAAO,CAAE,EAAE,KAAK,IAAI,cAAW;AAChG,aAAO,EAAE,MAAM,UAAU,cAAc,MAAK;IAChD,CAAC,GACG,WAAW,MAAM,KAAK,wBAAuB,CAAE,CAAC;EAExD;EAEA,0BAAuB;AACnB,WAAO,KAAK,WAAW,IAAyB,2BAA0B,oBAAI,KAAI,GAAG,QAAO,CAAE,EAAE,EAAE,KAAK,IAAI,sBAAmB;AAC1H,aAAO,EAAE,MAAM,kBAAkB,cAAc,KAAI;IACvD,CAAC,CAAC;EACN;EAEA,WAAQ;AAEJ,QAAI,KAAK,WAAW;AAChB,aAAO,GAAG,KAAK,SAAS;IAC5B;AAEA,QAAI,KAAK,gBAAgB;AACrB,aAAO,KAAK,qBAAqB,KAAK,UAAU,MAAM,GAAG,KAAK,aAAa,CAAA,CAAE,CAAC,CAAC;IACnF;AAEA,SAAK,iBAAiB;AACtB,SAAK,qBAAqB,KAAK,IAAI;AAEnC,UAAM,MAAM,KAAK,QAAQ;AAEzB,WAAO,KAAK,WAAW,IAAsB,KAAK,EAAE,SAAS,KAAK,QAAO,CAAE,EAAE,KAAK,IAAI,cAAW;AAE7F,WAAK,YAAY;AAEjB,WAAK,iBAAiB;AACtB,WAAK,qBAAqB,KAAK,KAAK;AAEpC,aAAO;IACX,CAAC,GACG,WAAW,MAAM,GAAG,CAAA,CAAE,CAAC,CAAC;EAEhC;EAEA,mBAAgB;AAEZ,UAAM,MAAM,KAAK,QAAQ;AAEzB,WAAO,KAAK,WAAW,IAAgC,KAAK,EAAE,SAAS,KAAK,QAAO,CAAE,EAAE,KAAK,IAAI,cAAW;AACvG,aAAO;IACX,CAAC,GACG,WAAW,MAAM,GAAG,CAAA,CAAE,CAAC,CAAC;EAEhC;;;mBAlFS,sBAAmB,mBAAA,UAAA,GAAA,mBAAA,WAAA,GAAA,mBAAA,aAAA,CAAA;AAAA;wFAAnB,sBAAmB,SAAnB,qBAAmB,WAAA,YAFhB,OAAM,CAAA;AAEhB,IAAO,sBAAP;",
  "names": []
}
