using OpenSettings.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;

namespace OpenSettings.Domains.Sql.Entities
{
    /// <summary>
    /// Represents an app entity.
    /// </summary>
    [Table("Apps")]
    public class AppSqlModel : EntityBase<int>
    {
        /// <summary>
        /// The display name of the app, typically used for open settings spa.
        /// </summary>
        public string DisplayName { get; set; }

        /// <summary>
        /// The lowercase version of the <see cref="DisplayName"/>, typically used for case-insensitive comparisons.
        /// </summary>
        public string DisplayNameLowercase { get; set; }

        /// <summary>
        /// The name of the client associated with the app.
        /// </summary>
        public string ClientName { get; set; }

        /// <summary>
        /// The lowercase version of the <see cref="ClientName"/>, typically used for case-insensitive comparisons.
        /// </summary>
        public string ClientNameLowercase { get; set; }

        /// <summary>
        /// An url friendly version of the <see cref="ClientName"/>, generated by trimming, converting to lowercase,  
        /// and replacing spaces or special characters with hyphens (using <see cref="Extensions.InternalExtensions.ToSlug"/> extension method).
        /// </summary>
        public string Slug { get; set; }

        /// <summary>
        /// The unique identifier of the app.
        /// </summary>
        public Guid ClientId { get; set; }

        /// <summary>
        /// The lowercase version of the <see cref="ClientId"/>, typically used for case-insensitive comparisons.
        /// </summary>
        public string ClientIdLowercase { get; set; }
        
        /// <summary>
        /// The hashed secret key of the app.
        /// </summary>
        public string HashedClientSecret { get; set; }

        /// <summary>
        /// The description of the app, typically used for open settings spa.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// The image url of the app, typically used for open settings spa.
        /// </summary>
        public string ImageUrl { get; set; }

        /// <summary>
        /// The wiki url of the app, typically used for open settings spa.
        /// </summary>
        public string WikiUrl { get; set; }

        /// <summary>
        /// The type of the app. 
        /// </summary>
        public AppType Type { get; set; }

        /// <summary>
        /// The id of the group which associated with this app.
        /// </summary>
        public int? GroupId { get; set; }

        /// <summary>
        /// The id of the user who created this app.
        /// </summary>
        public Guid? CreatedById { get; set; }

        /// <summary>
        /// The id of the user who last updated this app.
        /// </summary>
        public Guid? UpdatedById { get; set; }

        /// <summary>
        /// The sort order of this app in a list.
        /// </summary>
        public int SortOrder { get; set; }

        /// <summary>
        /// A concurrency token used for tracking changes.  
        /// Helps prevent conflicts during concurrent updates.
        /// </summary>
        public byte[] RowVersion { get; set; } = Array.Empty<byte>();

        /// <summary>
        /// The group which associated with this app.
        /// </summary>
        [ForeignKey(nameof(GroupId))]
        public AppGroupSqlModel Group { get; set; }

        /// <summary>
        /// The user who created this app.
        /// </summary>
        [ForeignKey(nameof(CreatedById))]
        public virtual UserSqlModel CreatedBy { get; set; }

        /// <summary>
        /// The user who last updated this app.
        /// </summary>
        [ForeignKey(nameof(UpdatedById))]
        public virtual UserSqlModel UpdatedBy { get; set; }

        /// <summary>
        /// A collection of configurations for this app.
        /// </summary>
        public virtual ICollection<ConfigurationSqlModel> Configurations { get; set; } = new List<ConfigurationSqlModel>();

        /// <summary>
        /// A collection of settings for this app.
        /// </summary>
        public virtual ICollection<SettingSqlModel> Settings { get; set; } = new List<SettingSqlModel>();

        /// <summary>
        /// A collection of instances for this app.
        /// </summary>
        public virtual ICollection<InstanceSqlModel> Instances { get; set; } = new List<InstanceSqlModel>();

        /// <summary>
        /// A collection of app-identifier mappings for this app.
        /// </summary>
        public virtual ICollection<AppIdentifierMappingSqlModel> AppIdentifierMappings { get; set; } = new List<AppIdentifierMappingSqlModel>();

        /// <summary>
        /// A collection of app-tag mappings for this app.
        /// </summary>
        public virtual ICollection<AppTagMappingSqlModel> AppTagMappings { get; set; } = new List<AppTagMappingSqlModel>();
    }
}