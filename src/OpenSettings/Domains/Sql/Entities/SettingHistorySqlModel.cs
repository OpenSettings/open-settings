using Ogu.Compressions.Abstractions;
using System;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO.Compression;

namespace OpenSettings.Domains.Sql.Entities
{
    /// <summary>
    /// Represents a setting history entity.
    /// </summary>
    [Table("SettingHistories")]
    public class SettingHistorySqlModel : EntityBase<int>
    {
        public byte[] Data { get; set; } = Array.Empty<byte>();

        public CompressionType CompressionType { get; set; }

        public CompressionLevel CompressionLevel { get; set; }

        /// <summary>
        /// Represents the version of the setting.
        /// </summary>
        public string Version { get; set; }

        /// <summary>
        /// An url friendly version of the <see cref="Version"/>, generated by trimming, converting to lowercase,  
        /// and replacing spaces or special characters with hyphens (using <see cref="Extensions.InternalExtensions.ToSlug"/> extension method).
        /// </summary>
        public string Slug { get; set; }

        public int SettingId { get; set; }

        /// <summary>
        /// The id of the user who created this setting history.
        /// </summary>
        public Guid? CreatedById { get; set; }

        /// <summary>
        /// The id of the user who last restored this setting history.
        /// </summary>
        public Guid? RestoredById { get; set; }

        /// <summary>
        /// A concurrency token used for tracking changes.  
        /// Helps prevent conflicts during concurrent updates.
        /// </summary>
        public byte[] RowVersion { get; set; } = Array.Empty<byte>();

        [ForeignKey(nameof(SettingId))]
        public virtual SettingSqlModel Setting { get; set; }

        /// <summary>
        /// The user who created this setting history.
        /// </summary>
        [ForeignKey(nameof(CreatedById))]
        public virtual UserSqlModel CreatedBy { get; set; }

        /// <summary>
        /// The user who last restored this setting history.
        /// </summary>
        [ForeignKey(nameof(RestoredById))]
        public virtual UserSqlModel RestoredBy { get; set; }
    }
}