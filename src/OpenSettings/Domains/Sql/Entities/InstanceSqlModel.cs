using OpenSettings.Models;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;

namespace OpenSettings.Domains.Sql.Entities
{
    /// <summary>
    /// Represents an instance entity.
    /// </summary>
    [Table("Instances")]
    public class InstanceSqlModel : EntityBase<int>
    {
        /// <summary>
        /// The name of the instance.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// The lowercase version of the <see cref="Name"/>, typically used for case-insensitive comparisons.
        /// </summary>
        public string NameLowercase { get; set; }

        /// <summary>
        /// An url friendly version of the <see cref="Name"/>, generated by trimming, converting to lowercase,  
        /// and replacing spaces or special characters with hyphens (using <see cref="Extensions.InternalExtensions.ToSlug"/> extension method).
        /// </summary>
        public string Slug { get; set; }

        /// <summary>
        /// The unique identifier of the instance.
        /// </summary>
        public string DynamicId { get; set; }

        /// <summary>
        /// The urls associated with the instance.
        /// </summary>
        public string[] Urls { get; set; } = Array.Empty<string>();

        /// <summary>
        /// The version of the instance.
        /// </summary>
        public string Version { get; set; }

        /// <summary>
        /// Indicates whether the instance is active.
        /// </summary>
        public bool IsActive { get; set; }

        // public bool IsRedisActive { get; set; }

        // public bool IsPollingSettingsWorkerActive { get; set; }

        /// <summary>
        /// The ip address of the instance.
        /// </summary>
        public string IpAddress { get; set; }

        /// <summary>
        /// The machine name of the instance.
        /// </summary>
        public string MachineName { get; set; }

        /// <summary>
        /// The environment of the instance.
        /// </summary>
        public string Environment { get; set; }

        /// <summary>
        /// A collection of reload strategies that instance support
        /// </summary>
        public List<ReloadStrategy> ReloadStrategies { get; set; } = new List<ReloadStrategy>();

        /// <summary>
        /// The service type of the instance (e.g. Provider or Consumer ).
        /// </summary>
        public ServiceType ServiceType { get; set; }

        /// <summary>
        /// If service type is Consumer this property will be null. Specifies provider's data access type.
        /// </summary>
        public DataAccessType? DataAccessType { get; set; }

        /// <summary>
        /// The app id associated with this instance.
        /// </summary>
        public int AppId { get; set; }

        /// <summary>
        /// The identifier id associated with this instance.
        /// </summary>
        public int IdentifierId { get; set; }

        /// <summary>
        /// The app associated with this instance.
        /// </summary>
        [ForeignKey(nameof(AppId))]
        public virtual AppSqlModel App { get; set; }

        /// <summary>
        /// The app associated with this identifier.
        /// </summary>
        [ForeignKey(nameof(IdentifierId))]
        public virtual IdentifierSqlModel Identifier { get; set; }
    }
}