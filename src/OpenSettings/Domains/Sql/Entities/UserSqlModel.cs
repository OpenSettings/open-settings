using OpenSettings.Helpers;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;

namespace OpenSettings.Domains.Sql.Entities
{
    /// <summary>
    /// Represents a user entity.
    /// </summary>
    [Table("Users")]
    public class UserSqlModel : EntityBase<Guid>
    {
        /// <summary>
        /// The authentication scheme used by the user (e.g., "OAuth", "BasicAuth").
        /// </summary>
        public string AuthScheme { get; set; }

        /// <summary>
        /// The OAuth provider name (e.g., "Google", "Facebook") if the user authenticated using OAuth.
        /// </summary>
        public string OAuthProvider { get; set; }

        /// <summary>
        /// The unique identifier provided by the authentication provider.
        /// </summary>
        public string ProviderId { get; set; }

        /// <summary>
        /// The user's email address.
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// The lowercase version of the <see cref="Email"/>, typically used for case-insensitive comparisons.
        /// </summary>
        public string EmailLowercase { get; set; }

        /// <summary>
        /// The username of the user.
        /// </summary>
        public string Username { get; set; }

        /// <summary>
        /// The lowercase version of the <see cref="Username"/>, typically used for case-insensitive comparisons.
        /// </summary>
        public string UsernameLowercase { get; set; }

        /// <summary>
        /// The hashed password for authentication.
        /// </summary>
        public string HashedPassword { get; set; }

        /// <summary>
        /// The name of the user.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// The lowercase version of the <see cref="Name"/>, typically used for case-insensitive comparisons.
        /// </summary>
        public string NameLowercase { get; set; }

        /// <summary>
        /// An url friendly version of the user, generated by trimming, converting to lowercase,  
        /// and replacing spaces or special characters with hyphens (using <see cref="Extensions.InternalExtensions.ToSlug"/> extension method).
        /// </summary>
        public string Slug { get; set; }

        /// <summary>
        /// The display name of the user, which may be different from their username or full name.
        /// </summary>
        public string DisplayName { get; set; }

        /// <summary>
        /// The user's initials, typically derived from their name.
        /// (using <see cref="Helper.GetInitials"/> helper method)
        /// </summary>
        public string Initials { get; set; }

        /// <summary>
        /// The date and time when the user last logged in.
        /// </summary>
        public DateTime LastLogin { get; set; }

        /// <summary>
        /// Indicates whether the user account is active.
        /// </summary>
        public bool IsActive { get; set; }

        /// <summary>
        /// A concurrency token used for tracking changes.  
        /// Helps prevent conflicts during concurrent updates.
        /// </summary>
        public byte[] RowVersion { get; set; } = Array.Empty<byte>();

        /// <summary>
        /// The collection of user-notification mappings associated with the user.
        /// </summary>
        public virtual ICollection<UserNotificationMappingSqlModel> UserNotificationMappings { get; set; } = new List<UserNotificationMappingSqlModel>();

        /// <summary>
        /// The collection of user-group mappings assigned to the user.
        /// </summary>
        public virtual ICollection<UserGroupMappingSqlModel> UserGroupMappings { get; set; } = new List<UserGroupMappingSqlModel>();

        /// <summary>
        /// The collection of user-claim mappings assigned to the user.
        /// </summary>
        public virtual ICollection<UserClaimMappingSqlModel> UserClaimMappings { get; set; } = new List<UserClaimMappingSqlModel>();

        /// <summary>
        /// The collection of user-role mappings assigned to the user.
        /// </summary>
        public virtual ICollection<UserRoleMappingSqlModel> UserRoleMappings { get; set; } = new List<UserRoleMappingSqlModel>();
    }
}